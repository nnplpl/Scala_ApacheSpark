package com.sundogsoftware.spark

import org.apache.spark._
import org.apache.spark.SparkContext._
import org.apache.spark.sql._
import org.apache.log4j._
import scala.io.Source
import java.nio.charset.CodingErrorAction
import scala.io.Codec
import org.apache.spark.sql.functions._

object PopularMovieData {
  def loadMovieNames() : Map[Int, String] = {
  
    implicit val codec = Codec("UTF-8")
    codec.onMalformedInput(CodingErrorAction.REPLACE)
    codec.onUnmappableCharacter(CodingErrorAction.REPLACE)
    
    
    var movieName: Map[Int, String] = Map()
    
    val lines = Source.fromFile("../ml-100k/u.item").getLines()
    for (line <- lines){
      var fields = line.split("|")
      if (fields.length > 1) {
        movieName += {fields(0).toInt -> fields(1)}
      }
      
    }
    return movieName
  }
  
  def main(args: Array[String]) {
    Logger.getLogger("org").setLevel(Level.ERROR)
    
    val sc = new SparkContext("local[*]", "PopularMovieData")
    
    var nameDict = sc.broadcast(loadMovieNames)
    
    val lines = sc.textFile("../ml-100k/u.data")
    
    val movies = lines.map(x => (x.split("\t")(1).toInt,1))
    
    val moviesCount = movies.reduceByKey((x,y) => (x+y))
    
    val flipped = moviesCount.map(x => (x._2, x._1))
    
    val sortedMovies = flipped.sortByKey()
    
    val sortedMoviesWithNames = sortedMovies.map(x => (nameDict.value(x._2), x._1))
    
    val result = sortedMoviesWithNames.collect()
    
    result.foreach(println)
  }
  
}